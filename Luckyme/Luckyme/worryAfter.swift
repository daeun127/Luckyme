//
//  worryAfter.swift
//  Luckyme
//
//  Created by DaeunLee on 6/1/24.
//

import SwiftUI



struct worryAfter: View {
    @Binding var negative: String
    
    let think1 = ["Î¨ºÏù¥ Îî± Î∞ò Ï†ïÎèÑ ÎÇ®ÏïòÎÑ§! Îã§ Î®πÍ∏∞Ïóî ÎÑàÎ¨¥ ÎßéÍ≥† Îçú Î®πÍ∏∞Ïóî ÎÑàÎ¨¥ Ï†ÅÍ≥† Í∑∏ÎûòÏÑú Îî± Î∞òÎßå ÏûàÏóàÏúºÎ©¥ Ï¢ãÍ≤†Îã§Í≥† ÏÉùÍ∞ÅÌñàÎäîÎç∞ ÏôÑÏ†Ñ Îü≠ÌÇ§ÎπÑÌÇ§ÏûñÏïÑüçÄ", "ÏÑ±Ï†ÅÏù¥ ÏïàÎÇòÏôÄÎèÑ Îçî ÎÖ∏Î†•ÌïòÎ©¥ Îã§Ïùå Î≤àÏóê Îçî ÎÜíÏùÄ ÏÑ±Ï†ÅÏùÑ Î∞õÏùÑ Ïàò ÏûàÏúºÎãà ÏôÑÏ†Ñ Îü≠ÌÇ§ÎπÑÌÇ§ÏûñÏïÑüçÄ", "ÎèàÏù¥ ÏóÜÎã§Î©¥ Ïù¥Ï†ú Îçî ÌòÑÎ™ÖÌïòÍ≤å ÎèàÏùÑ Îã§Î£®Îäî Î∞©Î≤ïÏùÑ Î∞∞Ïö∏ Ïàò ÏûàÎäî Í∏∞ÌöåÏïº.\nÏôÑÏ†Ñ Îü≠ÌÇ§ÎπÑÌÇ§ÏûñÏïÑüçÄ","ÏßÄÍ∏à Îî± ÎÇÆÏû†ÏûêÏÑú ÎÇòÎ®∏ÏßÄ ÏãúÍ∞ÑÏùÑ ÌôúÏö©Ìï† Ïàò ÏûàÏúºÎãà Îã§ÌñâÏù¥ÏßÄ Î≠êÏïºüòÜ\nÏôÑÏ†Ñ Îü≠ÌÇ§ÎπÑÌÇ§ÏûñÏïÑüçÄ"]

    let think2 = ["Î¨ºÏù¥ Î∞ò Î∞ñÏóê ÏïàÎÇ®ÏïòÏùÑ ÎïåÎäî ÏÇ¨Ïò§Î©¥ ÎêúÎã§", "ÏßÄÍ∏à Í≥µÎ∂Ä Ïïà ÌïòÎ©¥ ÎçîÏö∏ Îïå ÎçîÏö¥ Îç∞ÏÑú ÏùºÌïòÍ≥† Ï∂îÏö∏ Îïå Ï∂îÏö¥ Îç∞ÏÑú ÏùºÌïúÎã§.", "ÏßÄÍ∏àÏù¥ Í∏∞ÌöåÎã§.\nÎçî Îä¶ÏóàÎã§Îäî ÏÉùÍ∞ÅÏù¥ Îì§Í∏∞ Ï†ÑÏóê Îπ®Î¶¨ ÎèàÏùÑ Î™®ÏïÑÎùº.", "ÎÇÆÏû† Ìïú Î≤àÏùÄ ÏÉÅÍ¥Ä ÏóÜÎã§. Ïù∏ÏÉùÏùÄ Ìïú Î∞©Ïù¥ ÏûàÎäî Í≤ÉÏù¥ ÏïÑÎãàÎã§."]

    let think3 = ["Ïò§ÏºÄÏù¥! Î¨ºÏù¥ Î∞ò Ï†ïÎèÑ ÎÇ®ÏïòÍµ∞. Ï∂©Î∂ÑÌï¥! Bravo!", "Ïò§ÏºÄÏù¥! ÏÑ±Ï†ÅÏù¥ ÎÇÆÍµ∞. Ïù¥Ï†ú ÎÇ¥ ÏàòÏ§ÄÏùÑ ÏïåÏïòÏñ¥. Îçî ÎÖ∏Î†•ÌïòÎ©¥ Îèº. Bravo!", "ÎèàÏù¥ ÏóÜÎäî Ïù¥Îü∞ ÏãúÎ†®ÏùÑ Í∑πÎ≥µÌïòÎäî Î∞©Î≤ïÏùÑ Ï∞æÏïÑÎÇ∏Îã§Î©¥, Ï†ïÎßê ÎåÄÎã®Ìïú ÏùºÏùÑ Ìï¥ÎÇ∏Îã§Í≥† ÏÉùÍ∞ÅÌï¥! Bravo!", "Ïò§ÏºÄÏù¥! ÎÇÆÏû† Ïûî ÎçïÎ∂ÑÏóê Ïù¥Ï†ú ÏïàÏ°∏Î¶∞Îã§. Ìï† ÏùºÏùÑ ÌïòÏûê.  Bravo!"
]

    let think4 = ["Î¨ºÏù¥ Î∞òÏùÄ ÎÇ®ÏïòÏñ¥. Îçî ÎßàÏãúÍ≥† Ïã∂ÏúºÎ©¥ Îòê ÏÇ¨ÏôÄÏïºÏßÄ Î≠ê Ïñ¥Îñ°Ìï¥", "ÎÇ¥Í∞Ä Í≥µÎ∂ÄÎ•º Ï†ÅÍ≤å Ìïú Í±∏ Ïñ¥Îñ°Ìï¥. ÏßÄÍ∏àÏùÄ Î∞òÏÑ±ÌïòÍ≥† ÏïûÏúºÎ°ú ÎÇòÏïÑÍ∞ÄÎäî Í±∞Ïïº.", "ÎÇ¥Í∞Ä Îã§ Ïç®Î≤ÑÎ¶∞ Í±∏ Ïñ¥Îñ°Ìï¥. Í∑∏ÎûòÎèÑ Ïù¥Î≤à Îã¨Ïóî Îçî Ï†àÏïΩÌï¥Î¥êÏïºÏßÄ.", "Ïù¥ÎØ∏ ÏûêÎ≤ÑÎ¶∞ Í±∏ Ïñ¥Îñ°Ìï¥. Í∑∏Îüº ÎÇ®ÏùÄ ÏãúÍ∞ÑÏóê Ìï† ÏùºÏùÑ Ìï¥ÏïºÏßÄ."]
    
    // MARK: ÏÇ¨Í≥† Î≥ÄÌôò Ìï®Ïàò
    func changeThink(negative: String) -> (String, [String]) {
        var positive: [String] = []
        var category: String = ""
        if negative.contains("Î¨º"){
            category = "Î¨º"
            positive.append(think1[0])
            positive.append(think2[0])
            positive.append(think3[0])
            positive.append(think4[0])
        }
        if negative.contains("Í≥µÎ∂Ä"){
            category = "Í≥µÎ∂Ä"
            positive.append(think1[1])
            positive.append(think2[1])
            positive.append(think3[1])
            positive.append(think4[1])
            
        }
        if negative.contains("Îèà"){
            category = "Îèà"
            positive.append(think1[2])
            positive.append(think2[2])
            positive.append(think3[2])
            positive.append(think4[2])
        }
        if negative.contains("Ïû†"){
            category = "Ïû†"
            positive.append(think1[3])
            positive.append(think2[3])
            positive.append(think3[3])
            positive.append(think4[3])
        }
        
        return (category, positive)
    }
    
    @State var lucky: [String]
    
    var body: some View {
        NavigationStack{
            let results = changeThink(negative: negative)
            let _ = lucky.append((results.0))
            TabView{
                TextComponent(think: thinks[0], result: results.1[0], lucky: $lucky)
                TextComponent(think: thinks[1], result: results.1[1], lucky: $lucky)
                TextComponent(think: thinks[2], result: results.1[2], lucky: $lucky)
                TextComponent(think: thinks[3], result: results.1[3], lucky: $lucky)
            }
            .padding(.vertical, 70)
            .tabViewStyle(PageTabViewStyle())
            .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always))
            .navigationBarBackButtonHidden()
            NavigationLink(destination: lucky_card(lucky: $lucky)){
                YellowBtn(text: "ÌñâÏö¥ Î∂ÄÏ†ÅÏúºÎ°ú Ïù¥ÎèôÌïòÍ∏∞")
            }
        }
    }
}

#Preview {
    worryAfter(negative: .constant("Ïû†"), lucky: ["Ïû†"])
}

struct TextComponent: View {
    @State var isOn : Bool = false

    @State var think: String
    @State var result: String

    @Binding var lucky: [String]
    
    var body: some View {
        ZStack{
            VStack(spacing: -44){
                Circle().fill(.black)
                    .frame(width: 88, height: 88)
                    .zIndex(1.0)
                Rectangle().fill(.white)
                    .stroke(.black, style: StrokeStyle(lineWidth: 2.5))
                    .frame(width: 308, height: 399)
            }
            .overlay{
                VStack(alignment: .leading, spacing: 6){
                    Text(result)
                        .lineSpacing(6)
                        .font(.system(size: 24, weight: .medium))
                        .frame(width: 252, height: 265, alignment: .leading)
                        .position(x: 150, y: 230)
                    HStack{
                        Text(think)
                            .font(.system(size: 14, weight: .medium))
                        Spacer()
                        Button{
                            isOn.toggle()
                            lucky.append(result)
                            let _ = print(lucky)
                        } label:{
                            if isOn {
                                Image(systemName: "heart.fill")
                                    .resizable()
                                    .scaledToFill()
                                    .frame(width: 28, height: 28)
                                    .foregroundStyle(.black)
                            } else {
                                Image(systemName: "heart.fill")
                                    .resizable()
                                    .scaledToFill()
                                    .frame(width: 28, height: 28)
                            }}}
                    .padding(.bottom, 28)
                    .padding(.horizontal, 22)
                } }}
    }
}
